openapi: 3.0.1
info:
  title: gpg
  description: GPG En- and Decryption.
  version: "1.1"
  x-direktiv-meta:
    container: gcr.io/direktiv/apps/gpg
    maintainer: "[direktiv.io](https://www.direktiv.io)"
    issues: https://github.com/direktiv-apps/gpg/issues
    url: https://github.com/direktiv-apps/gpg
    categories:
    - tools
    - security
    license: "[Apache-2.0](https://www.apache.org/licenses/LICENSE-2.0)"
    long-description: |-
      This function provides GPG to Direktiv. There are minor differences using it in a container, e.g. decryption needs
      the following additional parameters `--pinentry-mode loopback` and `--batch`.
servers:
- url: /
paths:
  /:
    post:
      parameters:
      - name: Direktiv-ActionID
        in: header
        description: "direktiv action id is an UUID. \nFor development it can be set\
          \ to 'development'\n"
        schema:
          type: string
      - name: Direktiv-TempDir
        in: header
        description: |
          direktiv temp dir is the working directory for that request
          For development it can be set to e.g. '/tmp'
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                files:
                  type: array
                  description: Files are getting created before running commands.
                  items:
                    $ref: '#/components/schemas/direktivFile'
                public:
                  type: string
                  description: Base64-encoded public GPG key. If not set `public.key`
                    file will be used.
                private:
                  type: string
                  description: Base64-encoded private GPG key. If not set `private.key`
                    file will be used.
                commands:
                  type: array
                  description: Array of commands.
                  items:
                    type: object
                    properties:
                      command:
                        type: string
                        description: Command to run
                        example: gpg --list-keys
                      silent:
                        type: boolean
                        description: If set to false the command will not print output
                          to logs.
                        default: false
                      print:
                        type: boolean
                        description: If set to false the command will not print the
                          full command with arguments to logs.
                        default: true
                      continue:
                        type: boolean
                        description: "Stops excecution if command fails, otherwise\
                          \ proceeds with next command"
        required: false
      responses:
        "200":
          description: Results of command array.
          content:
            application/json:
              schema:
                type: object
                properties:
                  gpg:
                    type: array
                    items:
                      required:
                      - result
                      - success
                      type: object
                      properties:
                        success:
                          type: boolean
                        result:
                          type: object
            gpg:
              example:
                gpg:
                - result: |-
                    pub   rsa3072 2022-03-23 [SC] [expires: 2024-03-22]
                          A0FD12334AA0777FB47D05854B687F9FBAC356A3
                    uid           [ unknown] DirektivTestKey <info@direktiv.io>
                    sub   rsa3072 2022-03-23 [E] [expires: 2024-03-22]
                  success: true
        default:
          description: generic error response
          headers:
            Direktiv-ErrorMessage:
              schema:
                type: string
            Direktiv-ErrorCode:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-direktiv-function: |-
        functions:
          - id: gpg
            image: gcr.io/direktiv/apps/gpg:1.1
            type: knative-workflow
      x-direktiv-examples:
      - title: Decrypting
        content: "- id: req\n     type: action\n      action:\n        function: gpg\n\
          \        secrets: [\"private-key.asc\", \"gpg-pwd\"]\n        files:\n \
          \       - key: public-key.asc\n          scope: namespace\n          as:\
          \ public.key\n        input: \n          private: jq(.secrets.\"private-key.asc\"\
          )\n          commands: \n          - command: gpg --pinentry-mode loopback\
          \ --passphrase jq(.secrets.\"gpg-pwd\") -v --output pgp.tar.gz --batch --decrypt\
          \ pgp.tar.gz.pgp"
      - title: Encrypting
        content: "- id: req\n     type: action\n      action:\n        function: gpg\n\
          \        secrets: [\"private-key.asc\", \"gpg-pwd\"]\n        files:\n \
          \       - key: public-key.asc\n          scope: namespace\n          as:\
          \ public.key\n        input: \n          private: jq(.secrets.\"private-key.asc\"\
          )\n          commands: \n          - command: gpg --output out/namespace/jq(.name).tar.gz.gpg\
          \ --trust-model always --batch -r A0FD12334AA0777FB47D05854B687F9FBAC356A3\
          \ --encrypt file.tar.gz"
      x-direktiv:
        cmds:
        - action: exec
          exec: /bin/runner
          continue: false
        - action: exec
          exec: |-
            {{- if (empty .Public) }}
            echo "no public key in request"
            {{- else }}
            bash -c 'echo {{ .Public }} | base64 --decode > {{ .DirektivDir }}/public.key'
            {{- end }}
          silent: true
          print: false
        - action: exec
          exec: |-
            {{- if (empty .Private) }}
            echo "no private key in request"
            {{- else }}
            bash -c 'echo {{ .Private }} | base64 --decode > {{ .DirektivDir }}/private.key'
            {{- end }}
          silent: true
          print: false
        - action: exec
          exec: "gpg --batch --import {{ .DirektivDir }}/private.key"
        - action: exec
          exec: "gpg --batch --import {{ .DirektivDir }}/public.key"
          continue: false
        - action: foreach
          loop: .Commands
          exec: "{{ .Item.Command }}"
          silent: "{{ .Item.Silent }}"
          print: "{{ .Item.Print }}"
          continue: "{{ .Item.Continue }}"
          env:
          - ENV GPG_TTY=/dev/console
        output: |
          {
            "gpg": {{ index . 5 | toJson }}
          }
      x-direktiv-errors:
        io.direktiv.command.error: Command execution failed
        io.direktiv.output.error: Template error for output generation of the service
        io.direktiv.ri.error: Can not create information object from request
      x-codegen-request-body-name: body
components:
  schemas:
    direktivFile:
      type: object
      x-go-type:
        type: DirektivFile
        import:
          package: github.com/direktiv/apps/go/pkg/apps
    error:
      required:
      - errorCode
      - errorMessage
      type: object
      properties:
        errorCode:
          type: string
        errorMessage:
          type: string
